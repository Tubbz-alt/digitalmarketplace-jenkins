{# Create an index-briefs and index-services catch up job to run nightly for preview staging and production #}
{% for environment in ['preview', 'staging', 'production'] %}
{% for object, hour in (('services', 2), ('briefs', 3))%}
- job:
    name: "update-{{ object }}-index-{{ environment }}"
    display-name: "Index {{ object }} - {{ environment }}"
    project-type: pipeline
    description: |
     "Timed catch up job to update the {{ environment }} {{ object }} index with {{ object }} in the {{ environment }} database."
    concurrent: false
    triggers:
      - timed: "H {{ hour }} * * *"
    pipeline:
      script: |
        node {
          try {
            stage('Update index') {
              build job: "update-index-{{ environment }}",
              parameters: [
                string(name: 'OBJECTS', value: "{{ object }}"),
                string(name: 'INDEX', value: "{{ search_config[object][environment].default_index }}"),
                string(name: 'FRAMEWORKS', value: "{{ search_config[object][environment].frameworks }}")
              ]
            }
          } catch(err) {
            currentBuild.result = 'FAILURE'
            echo "Error: ${err}"
            build job: 'notify-slack', parameters: [
              string(name: 'USERNAME', value: "index-{{ object }}"),
              string(name: 'JOB', value: "Index {{ object }} {{ environment }} :jenkins_parrot:"),
              string(name: 'ICON', value: ":alarm_clock:"),
              string(name: 'STAGE', value: "{{ environment }}"),
              string(name: 'STATUS', value: "FAILED"),
              string(name: 'URL', value: "<${BUILD_URL}consoleFull|#${BUILD_NUMBER}>"),
              string(name: 'CHANNEL', value: "#dm-2ndline")
            ]
          }
        }
{% endfor %}